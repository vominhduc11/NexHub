services:
  config-server:
    build: ./config-server
    container_name: nexhub-config-server
    ports:
      - "8888:8888"
    environment:
      - SPRING_PROFILES_ACTIVE=native
      - SPRING_APPLICATION_NAME=config-server
      - SERVER_PORT=8888
      - SPRING_CLOUD_CONFIG_SERVER_NATIVE_SEARCH_LOCATIONS=classpath:/configs/
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info
      - MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS=always
    networks:
      - next-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  discovery-service:
    build: ./discovery-service
    container_name: nexhub-discovery-service
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_APPLICATION_NAME=discovery-service
      - SERVER_PORT=8761
      - CONFIG_SERVER_URL=http://config-server:8888
      - EUREKA_INSTANCE_HOSTNAME=discovery-service
      - EUREKA_INSTANCE_PREFER_IP=false
      - EUREKA_CLIENT_REGISTER_WITH_EUREKA=false
      - EUREKA_CLIENT_FETCH_REGISTRY=false
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://discovery-service:8761/eureka/
      - EUREKA_SERVER_ENABLE_SELF_PRESERVATION=false
      - EUREKA_SERVER_EVICTION_INTERVAL=10000
    depends_on:
      config-server:
        condition: service_healthy
    networks:
      - next-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  api-gateway:
    build: ./api-gateway
    container_name: nexhub-api-gateway
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_APPLICATION_NAME=api-gateway
      - SERVER_PORT=8080
      - SPRING_CLOUD_CONFIG_URI=http://config-server:8888
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://discovery-service:8761/eureka/
      - EUREKA_CLIENT_REGISTER_WITH_EUREKA=true
      - EUREKA_CLIENT_FETCH_REGISTRY=true
      - EUREKA_INSTANCE_HOSTNAME=api-gateway
      - EUREKA_INSTANCE_PREFER_IP=false
      - LOGGING_LEVEL_ROOT=INFO
      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_CLOUD_GATEWAY=DEBUG
      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_CLOUD_GATEWAY_ROUTE_ROUTEDEFINITIONLOCATOR=INFO
      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_CLOUD_GATEWAY_HANDLER_ROUTEPREDICATEHANDLERMAPPING=DEBUG
      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_CLOUD_GATEWAY_HANDLER_ROUTEPREDICATEFACTORY=DEBUG
      - CORS_ALLOWED_ORIGINS=http://localhost:3000,http://localhost:8080,http://localhost:5731
      - CORS_ALLOWED_METHODS=GET,POST,PUT,DELETE,OPTIONS
      - CORS_ALLOWED_HEADERS=Content-Type,Authorization,X-Requested-With,Accept,Origin,Access-Control-Request-Method,Access-Control-Request-Headers
      - CORS_ALLOW_CREDENTIALS=true
      - AUTH_SERVICE_URI=lb://auth-service
      - USER_SERVICE_URI=lb://user-service
      - NOTIFICATION_SERVICE_URI=lb://notification-service
      - BLOG_SERVICE_URI=lb://blog-service
      - WARRANTY_SERVICE_URI=lb://warranty-service
      - PRODUCT_SERVICE_URI=lb://product-service
      - LANGUAGE_SERVICE_URI=lb://language-service
    depends_on:
      config-server:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
    networks:
      - next-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  auth-service:
    build: ./auth-service
    container_name: nexhub-auth-service
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_APPLICATION_NAME=auth-service
      - SERVER_PORT=8081
      - SPRING_CLOUD_CONFIG_URI=http://config-server:8888
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://discovery-service:8761/eureka/
      - EUREKA_CLIENT_REGISTER_WITH_EUREKA=true
      - EUREKA_CLIENT_FETCH_REGISTRY=true
      - EUREKA_INSTANCE_HOSTNAME=auth-service
      - EUREKA_INSTANCE_PREFER_IP=false
      - LOGGING_LEVEL_ROOT=INFO
      - LOGGING_LEVEL_COM_DEVWONDER_AUTH_SERVICE=DEBUG
      - DATABASE_URL=jdbc:postgresql://postgres:5432/nexhub_auth
      - DATABASE_USERNAME=nexhub
      - DATABASE_PASSWORD=nexhub123
    depends_on:
      config-server:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - next-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  postgres:
    image: postgres:15-alpine
    container_name: nexhub-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=nexhub_auth
      - POSTGRES_USER=nexhub
      - POSTGRES_PASSWORD=nexhub123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init-databases.sql:/docker-entrypoint-initdb.d/init-databases.sql
    networks:
      - next-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U nexhub -d nexhub_auth"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  redis:
    image: redis:7-alpine
    container_name: dishub_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass voduc123
    networks:
      - next-network

  zookeeper1:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: dishub_zookeeper1
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_SERVERS: zookeeper1:2888:3888;zookeeper2:2888:3888;zookeeper3:2888:3888
    ports:
      - "2181:2181"
    volumes:
      - zookeeper1_data:/var/lib/zookeeper/data
      - zookeeper1_logs:/var/lib/zookeeper/log
    restart: unless-stopped
    networks:
      - next-network

  zookeeper2:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: dishub_zookeeper2
    environment:
      ZOOKEEPER_SERVER_ID: 2
      ZOOKEEPER_CLIENT_PORT: 2182
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_SERVERS: zookeeper1:2888:3888;zookeeper2:2888:3888;zookeeper3:2888:3888
    ports:
      - "2182:2182"
    volumes:
      - zookeeper2_data:/var/lib/zookeeper/data
      - zookeeper2_logs:/var/lib/zookeeper/log
    restart: unless-stopped
    networks:
      - next-network

  zookeeper3:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: dishub_zookeeper3
    environment:
      ZOOKEEPER_SERVER_ID: 3
      ZOOKEEPER_CLIENT_PORT: 2183
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_SERVERS: zookeeper1:2888:3888;zookeeper2:2888:3888;zookeeper3:2888:3888
    ports:
      - "2183:2183"
    volumes:
      - zookeeper3_data:/var/lib/zookeeper/data
      - zookeeper3_logs:/var/lib/zookeeper/log
    restart: unless-stopped
    networks:
      - next-network

  # Kafka Cluster (3 brokers)
  kafka1:
    image: confluentinc/cp-kafka:7.4.0
    container_name: dishub_kafka1
    depends_on:
      - zookeeper1
      - zookeeper2
      - zookeeper3
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper1:2181,zookeeper2:2182,zookeeper3:2183
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_MIN_IN_SYNC_REPLICAS: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - kafka1_data:/var/lib/kafka/data
    restart: unless-stopped
    networks:
      - next-network

  kafka2:
    image: confluentinc/cp-kafka:7.4.0
    container_name: dishub_kafka2
    depends_on:
      - zookeeper1
      - zookeeper2
      - zookeeper3
    ports:
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper1:2181,zookeeper2:2182,zookeeper3:2183
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:9093
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_MIN_IN_SYNC_REPLICAS: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - kafka2_data:/var/lib/kafka/data
    restart: unless-stopped
    networks:
      - next-network

  kafka3:
    image: confluentinc/cp-kafka:7.4.0
    container_name: dishub_kafka3
    depends_on:
      - zookeeper1
      - zookeeper2
      - zookeeper3
    ports:
      - "9094:9094"
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper1:2181,zookeeper2:2182,zookeeper3:2183
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka3:9094
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_MIN_IN_SYNC_REPLICAS: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - kafka3_data:/var/lib/kafka/data
    restart: unless-stopped
    networks:
      - next-network

networks:
  next-network:
    driver: bridge

volumes:
  postgres_data:
  pgadmin_data:
  redis_data:
  zookeeper1_data:
  zookeeper1_logs:
  zookeeper2_data:
  zookeeper2_logs:
  zookeeper3_data:
  zookeeper3_logs:
  kafka1_data:
  kafka2_data:
  kafka3_data: